package main

import (
	//"flag"
	"os"
	"strings"
	"strconv"
	"unicode"
	"sort"
)
import "fmt"
import "mapreduce"

// The mapping function is called once for each piece of the input.
// In this framework, the key is the name of the file that is being processed,
// and the value is the file's contents. The return value should be a slice of
// key/value pairs, each represented by a mapreduce.KeyValue.
func mapF(document string, value string) (res []mapreduce.KeyValue) {
	// Your code here (Part V).
	// split
	words := strings.FieldsFunc(value, func(c rune) bool {
		return !unicode.IsLetter(c) && !unicode.IsNumber(c)
	})

	// count
	inverseIndex := make(map[string]string)
	for _, w := range words {
		inverseIndex[w] = document
	}

	// convert from map to a slice
	res = make([]mapreduce.KeyValue, 0, len(inverseIndex))
	for k, v := range inverseIndex {
		res = append(res, mapreduce.KeyValue{k, v})
	}
	return
}

// The reduce function is called once for each key generated by Map, with a
// list of that key's string value (merged across all inputs). The return value
// should be a single output value for that key.
func reduceF(key string, values []string) string {
	// Your code here (Part V).
    set := make(map[string]bool)
	for _, v := range values {
		set[v] = true
	}

	// convert the set to array and sort the set
	var toSort []string
	for k, _ := range set {
		toSort = append(toSort, k)
	}
	sort.Slice(toSort, func(i, j int) bool {
        return toSort[i] < toSort[j]
	})

	// convert to string
    var b strings.Builder
	b.WriteString(strconv.Itoa(len(toSort)) + " ")
	b.WriteString(toSort[0])
	for i := 1; i < len(toSort); i++ {
		b.WriteRune(',')
		b.WriteString(toSort[i])
	}

	return b.String()
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("iiseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("iiseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100, nil)
	}
}
